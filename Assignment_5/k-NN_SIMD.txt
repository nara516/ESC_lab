#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <xmmintrin.h>

#define REF_SIZE 2048
#define TEST_SIZE 4096
#define VECTOR_LENGTH 2048

typedef struct {

	float *v;
	int label;

} Data;

typedef struct {

	float dist;
	int label;

} Distance;

int compare(const void*x, const void*y)
{

	const Distance *a = (const Distance *)x;
	const Distance *b = (const Distance *)y;

	if ((a->dist) > (b->dist))
		return 1;

	else if ((a->dist) < (b->dist))
		return -1;

	else
		return 0;

}

int main(int argc, char *argv[])
{
	int i, j, h, p;

	clock_t start, end;
	float t;

	int k = 45;
	/*	int k = atoi(argv[1]);
		if ( argv[1]==NULL )
			printf("k값을 확인해주세요. \n");	*/

	__m128 x1, x2, r, sum_sse;
	sum_sse.m128_f32[0] = 0;
	sum_sse.m128_f32[1] = 0;
	sum_sse.m128_f32[2] = 0;
	sum_sse.m128_f32[3] = 0;


	Data *ref = (Data *)_aligned_malloc(sizeof(Data)*REF_SIZE, 16);
	Data *test = (Data*)_aligned_malloc(sizeof(Data)*TEST_SIZE, 16);
	Distance *result = (Distance*)_aligned_malloc(sizeof(Distance)*REF_SIZE, 16);

	for (i = 0; i < REF_SIZE; i++)
		ref[i].v = (float *)_aligned_malloc(sizeof(float)*VECTOR_LENGTH, 16);

	for (i = 0; i < TEST_SIZE; i++)
		test[i].v = (float *)_aligned_malloc(sizeof(float)*VECTOR_LENGTH, 16);


	for (i = 0; i < REF_SIZE; i++) {

		for (j = 0; j < VECTOR_LENGTH; j++) {

			ref[i].v[j] = (rand() % 100) / 100.0;

		}

		ref[i].label = (rand() % 3) + 1;

	}


	for (i = 0; i < TEST_SIZE; i++) {

		for (j = 0; j < VECTOR_LENGTH; j++) {

			test[i].v[j] = (rand() % 100) / 100.0;

		}

		test[i].label = (rand() % 3) + 1;

	}


	start = clock();

	for (i = 0; i < TEST_SIZE; i++) {

		printf("%d번째 test data \n", i + 1);

		for (j = 0; j < REF_SIZE; j++) {

			for (h = 0; h < VECTOR_LENGTH; h += 4) {

				x1 = _mm_load_ps(&ref[j].v[h]);	//x1에 ref[j].v[h]의 내용을 넣음
				x2 = _mm_load_ps(&test[i].v[h]);	//x2에 test[i].v[h]의 내용을 넣음
				r = _mm_sub_ps(x1, x2);		//ref - test
				r = _mm_mul_ps(r, r); 		//제곱
				sum_sse = _mm_add_ps(sum_sse, r);	//합

			}

			result[j].dist = sum_sse.m128_f32[0] + sum_sse.m128_f32[1] + sum_sse.m128_f32[2] + sum_sse.m128_f32[3];
			result[j].label = ref[j].label;
			//printf("result[%d].dist / label = %f, %d \n ", j+1, result[j].dist, result[j].label);

			sum_sse.m128_f32[0] = 0;
			sum_sse.m128_f32[1] = 0;
			sum_sse.m128_f32[2] = 0;
			sum_sse.m128_f32[3] = 0;

		}

		qsort(result, REF_SIZE, sizeof(result[0]), compare);

		int cnt1 = 0;
		int cnt2 = 0;
		int cnt3 = 0;

		for (p = 0; p < k; p++) {

			//printf("%d : %f \n", p+1, result[p].dist);

			if (result[p].label == 1)
				cnt1++;

			else if (result[p].label == 2)
				cnt2++;

			else if (result[p].label == 3)
				cnt3++;

		}

		if (cnt1 >= cnt2 && cnt1 >= cnt3)
			printf("분류 결과 : 1 \n");

		else if (cnt2 >= cnt1 && cnt2 >= cnt3)
			printf("분류 결과 : 2 \n");

		else if (cnt3 >= cnt1 && cnt3 >= cnt1)
			printf("분류 결과 : 3 \n");

	}


	end = clock();
	t = (float)(end - start);


	printf("SIMD 적용 후 실행시간 : %.3f [s]\n", t/1000);


	_aligned_free(ref);
	_aligned_free(test);
	_aligned_free(result);


	return 0;

}