#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h> 
#define REF_SIZE 105
#define TEST_SIZE 45

typedef struct {
	
	double a;		//꽃받침의 길이
	double b;		//꽃받침의 너비
	double c;		//꽃잎의 길이
	double d;		//꽃잎의 너비
	char species[150];

} Data;

typedef struct {
	
	double dist;
	char kind[150];

} Distance;


int compare(const void *x, const void *y);
int main(int argc, char *argv[])
{

	FILE *fp1, *fp2, *fp3;

	int i,j,p;
	int success_set = 0;
	int success_ver = 0;
	int success_vir = 0;
	
	char iris_1[] = "Iris-setosa";
	char iris_2[] = "Iris-versicolor";
	char iris_3[] = "Iris-virginica";
	
	int k =  atoi(argv[4]);


	Data *ref = (Data *)malloc(sizeof(Data)*REF_SIZE);
	Data *test = (Data*)malloc(sizeof(Data)*TEST_SIZE);
	Distance *result = (Distance*)malloc(sizeof(Distance)*REF_SIZE);


	fp1 = fopen(argv[1], "r");	
		
		if( fp1 == NULL)
			printf("reference data 파일 열기 실패\n");
		else
			printf("reference data 파일 열기 성공\n");

		for( i=0 ; i<REF_SIZE ; i++)
			fscanf(fp1, "%lf,%lf,%lf,%lf,%s", &ref[i].a, &ref[i].b, &ref[i].c, &ref[i].d, ref[i].species );

	fclose(fp1);

	fp2 = fopen(argv[2], "r");	
		
		if( fp2 == NULL)
			printf("test data 파일 열기 실패\n");
		else
			printf("test data 파일 열기 성공\n");

		for( i=0 ; i<TEST_SIZE ; i++)
			fscanf(fp2, "%lf,%lf,%lf,%lf,%s", &test[i].a, &test[i].b, &test[i].c, &test[i].d, test[i].species );

	fclose(fp2);

	fp3 = fopen(argv[3], "w");

		if( fp3 == NULL)
			printf("iris_result 파일 열기 실패\n");
		else
			printf("iris_result 파일 열기 성공\n");

	if ( argv[4]==NULL )
		printf("k값을 입력해주세요. \n");


	for( i=0 ; i<TEST_SIZE ; i++){
	
		double sum = 0;
		int set = 0;
		int ver = 0;
		int vir = 0;
		
		fprintf(fp3, "%d번째 test data \n", i+1);

		for( j=0 ; j<REF_SIZE ; j++) {

			sum = pow(ref[j].a - test[i].a, 2) + pow(ref[j].b - test[i].b, 2) + pow(ref[j].c - test[i].c, 2) + pow(ref[j].d - test[i].d, 2); 
			result[j].dist = sqrt( sum );
			strcpy( result[j].kind, ref[j].species );


		}
	
		qsort(result, REF_SIZE, sizeof(result[0]), compare);
		
		for( p=0 ; p<k ; p++) {

			if( strcmp(iris_1, result[p].kind) == 0 )
				set++;
			else if( strcmp(iris_2, result[p].kind) == 0 )
				ver++;
			else if( strcmp(iris_3, result[p].kind) == 0 )		
				vir++;

		}

		if( set>=ver && set>=vir) {

			fprintf(fp3, "분류 결과 : Iris-setosa \n");
			
			if( strcmp(iris_1, test[i].species) == 0 ) {

				success_set++;
				fprintf(fp3, "분류 성공 \n");
				fprintf(fp3,"\n");

			}

			else {

				fprintf(fp3, "분류 실패 \n");
				fprintf(fp3,"\n");
	
			}
		
		}	

		else if( ver>=set && ver>=vir) {

			fprintf(fp3, "분류 결과 : Iris-versicolor \n");
			
			if( strcmp(iris_2, test[i].species) == 0 ) {

				success_ver++;
				fprintf(fp3, "분류 성공 \n");
				fprintf(fp3,"\n");

			}

			else {

				fprintf(fp3, "분류 실패 \n");
				fprintf(fp3,"\n");

			}
		
		}

		else if( vir>=set && vir>=ver) {

			fprintf(fp3, "분류 결과 : Iris-virginica \n");
			
			if( strcmp(iris_3, test[i].species) == 0 ) {

				success_vir++;
				fprintf(fp3, "분류 성공 \n");
				fprintf(fp3,"\n");

			}

			else {

				fprintf(fp3, "분류 실패 \n");
				fprintf(fp3,"\n");

			}
		
		}

			
	}


	fclose(fp3);
	free(ref);
	free(test);
	free(result);


	// 분류정확도 (맞게 분류된 벡터/총 벡터)
	printf(" Iris-setosa 분류 정확도 : %.2lf \n", ((double)success_set/(TEST_SIZE/3)) );
	printf(" Iris-versicolor 분류 정확도 : %.2lf \n", ((double)success_ver/(TEST_SIZE/3)) );
	printf(" Iris-virginica 분류 정확도 : %.2lf \n", ((double)success_vir/(TEST_SIZE/3)) );

	
	return 0;
	

}

int compare(const void*x, const void*y)
{
	
	const Distance *a = (const Distance *) x;
	const Distance *b = (const Distance *) y;

	if( (a->dist) > (b->dist) )
		return 1;
		
	else if( (a->dist) < (b->dist) )
		 return -1;

	else
		return 0; 

}

	